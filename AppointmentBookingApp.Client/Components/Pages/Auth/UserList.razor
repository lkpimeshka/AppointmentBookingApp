@page "/user-list"
@using AppointmentBookingApp.Application.Auth
@using AppointmentBookingApp.Application.Auth.DTOs
@using AppointmentBookingApp.Client.Services
@using AppointmentBookingApp.Client.Providers

@inject IAuthService AuthService
@inject AuthStateProvider AuthStateProvider

<AuthorizeView Roles="Admin">
    <NotAuthorized>
        <MudAlert Severity="Severity.Error">
            You are not authorized to view this page. Only Admin can access this page.
        </MudAlert>
    </NotAuthorized>
    <Authorized>
        <MudDataGrid T="UserDto" Items="@Users" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                     Hideable="false">
            <ToolBarContent>
                <MudText Typo="Typo.h6">User List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="ID" />
                <PropertyColumn Property="x => x.FullName" Title="Full Name" />
                <PropertyColumn Property="x => x.UserName" Title="Username" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
                <PropertyColumn Property="x => x.Role" Title="Role" />
                <PropertyColumn Property="x => x.Specialization" Title="Specialization" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="UserDto" />
            </PagerContent>
        </MudDataGrid>
    </Authorized>
</AuthorizeView>

@code {

    private string? _searchString;
    private List<UserDto> Users = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await AuthService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

    private Func<UserDto, bool> _quickFilter => x =>
    {
    if (string.IsNullOrWhiteSpace(_searchString))
        return true;

    return x.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
           x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
           x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
           x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
           x.Role.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
           (x.Specialization?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };
}

